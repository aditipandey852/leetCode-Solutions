# 1140. Stone Game II

class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        A = 1
        B = -1
        N = len(piles)

        @cache
        def max_piles_from(idx,m,turn):
            if idx==N:
                return 0
            localMax = 0
            localMin = float('inf')
            turnSum = 0
            for x in range(1,min(2*m,N-idx)+1):
                harvesting_idx = idx + x - 1
                turnSum += piles[harvesting_idx]
                next_m = max(m,x)
                current_turn_gain = turnSum if turn == A else 0
                future_gain = max_piles_from(harvesting_idx + 1,next_m, -turn)
                localMax = max(localMax, current_turn_gain + future_gain)
                localMin = min(localMin, current_turn_gain + future_gain)
            return localMax if turn == A else localMin
        return max_piles_from(0, 1, A)
